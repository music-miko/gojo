from functools import wraps 
from pyrogram import Client
from pyrogram.enums import ChatType
from pyrogram.types import Message
from pyrogram.enums import ChatMemberStatus

from Curse import BOT_ID
from Curse.bot_class import app
from Curse.supports import get_support_staff

SUPPORT_STAFF = get_support_staff()

COMMANDERS = [ChatMemberStatus.ADMINISTRATOR,ChatMemberStatus.OWNER]


# def user_has_permission(permission):
#     def decorator(func):
#         @wraps(func)
#         async def wrapper(client, message: Message):
#             user_id = message.reply_to_message.from_user.id
#             chat_id = message.chat.id

#             x = await client.get_chat_member(chat_id, user_id)
#             privileges = x.privileges.__dict__

#             if permission in privileges and privileges[permission]:
#                 await func(client, message)
#             else:
#                 print(f"User does not have the permission: {permission}")

#         return wrapper

#     return decorator



async def user_has_permission(chat_title : str, chat_id: int, user_id: int, permission: str,bot=True) -> tuple[bool, str]:
    try:
        if user_id in SUPPORT_STAFF:
            have_permission = True
        else:
            chat_member = await app.get_chat_member(chat_id, user_id)
            chat_permissions = chat_member.privileges
            if permission == "can_delete_messages":
                have_permission = chat_permissions.can_delete_messages
            elif permission == "can_manage_chat":
                have_permission = chat_permissions.can_manage_chat
            elif permission == "can_manage_video_chats":
                have_permission = chat_permissions.can_manage_video_chats
            elif permission == "can_restrict_members":
                have_permission = chat_permissions.can_restrict_members
            elif permission == "can_promote_members":
                have_permission = chat_permissions.can_promote_members
            elif permission == "can_change_info":
                have_permission = chat_permissions.can_change_info
            elif permission == "can_post_messages":
                have_permission = chat_permissions.can_post_messages
            elif permission == "can_edit_messages":
                have_permission = chat_permissions.can_edit_messages
            elif permission == "can_invite_users":
                have_permission = chat_permissions.can_invite_users
            elif permission == "can_pin_messages":
                have_permission = chat_permissions.can_pin_messages    
            else:
                have_permission = False

    except Exception as e:
        print(e)
        have_permission = False

    if not have_permission:
        if bot:
            txt = f" ú·¥á è  ô·¥Ä ô è, I ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥õ ú·¥á “ì·¥è ü ü·¥è·¥°…™…¥…¢  Ä…™…¢ ú·¥õ:\n**__{permission}__**\n…™…¥ **{chat_title}**. P ü·¥á·¥Äs·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä…¥·¥Ö …¢ Ä·¥Ä…¥·¥õ ·¥ç·¥á ·¥õ ú·¥á  Ä…™…¢ ú·¥õ."
        else:
            txt = f" ú·¥á è  ô·¥Ä ô è,  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥õ ú·¥á “ì·¥è ü ü·¥è·¥°…™…¥…¢  Ä…™…¢ ú·¥õ:\n{permission}\n…™…¥ {chat_title}.s·¥è …™ ·¥°·¥è…¥'·¥õ  ô·¥á ·¥Ä ô ü·¥á ·¥õ·¥è ·¥ò·¥á Ä“ì·¥è·¥ç ·¥õ ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥ “ì·¥è Ä  è·¥è·¥ú"
        return have_permission, txt
    else:
        return have_permission, None


def bot_admin(func):
    @wraps(func)
    async def is_bot_admin(app : Client, message : Message,*args,**kwargs):
        chat_type = message.chat.type
        if chat_type == ChatType.PRIVATE:
            return await message.reply("·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥Äs ·¥ç·¥Ä·¥Ö·¥á ·¥ú·¥ò “ì·¥è Ä …¢ Ä·¥è·¥ú·¥òs …¥·¥è·¥õ “ì·¥è Ä ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á")
        BOT = await app.get_chat_member(message.chat.id,BOT_ID)                 
        if BOT.status != ChatMemberStatus.ADMINISTRATOR:                                       
            await message.reply_text(f" ú·¥á è  ô·¥Ä ô·¥ás …™'·¥ç …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ **{message.chat.title}**")
            return 
        return await func(app,message,*args,**kwargs)
    return is_bot_admin

def bot_can_ban(func):
    @wraps(func)
    async def can_restrict(app : Client, message : Message,*args,**kwargs):
        BOT = await app.get_chat_member(message.chat.id,BOT_ID)
                 
        if not BOT.privileges.can_restrict_members:                        
            await message.reply_text(f" ú·¥á è  ô·¥Ä ô è …™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á  Ä…™…¢ ú·¥õs ·¥õ·¥è  Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ ·¥ús·¥á Ä …™…¥ **{message.chat.title}**. ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä…¥·¥Ö …¢…™·¥†·¥á ·¥ç·¥á ·¥õ ú·¥á  Ä…™…¢ ú·¥õ ·¥ò ü·¥á·¥Äs·¥á.ü•∫")
            return 
        return await func(app,message,*args,**kwargs)
    return can_restrict

def bot_can_change_info(func):
    @wraps(func)
    async def can_change_info(app : Client, message : Message,*args,**kwargs):
        BOT = await app.get_chat_member(message.chat.id,BOT_ID)

        if not BOT.privileges.can_change_info:                         
            await message.reply_text(f" ú·¥á è  ô·¥Ä ô è …™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥Ñ ú·¥Ä…¥…¢·¥á …™…¥“ì·¥è ·¥è“ì **{message.chat.title}**. ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä…¥·¥Ö …¢…™·¥†·¥á ·¥ç·¥á ·¥õ ú·¥á  Ä…™…¢ ú·¥õ ·¥ò ü·¥á·¥Äs·¥á.ü•∫")
            return 
        return await func(app,message,*args,**kwargs)
    return can_change_info


def bot_can_promote(func):
    @wraps(func)
    async def can_promote(app : Client, message : Message,*args,**kwargs):
        BOT = await app.get_chat_member(message.chat.id,BOT_ID)

        if not BOT.privileges.can_promote_members:                         
            await message.reply_text(f" ú·¥á è  ô·¥Ä ô è …™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á  Ä…™…¢ ú·¥õs ·¥õ·¥è **·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á ·¥ús·¥á Äs** …™…¥ **{message.chat.title}**. ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä…¥·¥Ö …¢…™·¥†·¥á ·¥ç·¥á ·¥õ ú·¥á  Ä…™…¢ ú·¥õ ·¥ò ü·¥á·¥Äs·¥á.")
            return 
        return await func(app,message,*args,**kwargs)
    return can_promote


def bot_can_pin(func):
    @wraps(func)
    async def can_pin(app : Client, message : Message,*args,**kwargs):
        BOT = await app.get_chat_member(message.chat.id,BOT_ID)

        if not BOT.privileges.can_pin_messages:                         
            await message.reply_text(f" ú·¥á è  ô·¥Ä ô è …™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á  Ä…™…¢ ú·¥õs ·¥õ·¥è **·¥ò…™…¥ ·¥ç·¥áss·¥Ä…¢·¥ás** …™…¥ **{message.chat.title}**. ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä…¥·¥Ö …¢…™·¥†·¥á ·¥ç·¥á ·¥õ ú·¥á  Ä…™…¢ ú·¥õ ·¥ò ü·¥á·¥Äs·¥á.")
            return 
        return await func(app,message,*args,**kwargs)
    return can_pin

def bot_can_del(func):
    @wraps(func)
    async def can_delete(app : Client, message : Message,*args,**kwargs):
        BOT = await app.get_chat_member(message.chat.id,BOT_ID)

        if not BOT.privileges.can_delete_messages:                         
            await message.reply_text(f" ú·¥á è  ô·¥Ä ô è …™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á  Ä…™…¢ ú·¥õs ·¥õ·¥è **·¥Ö·¥á ü·¥á·¥õ·¥á ·¥ç·¥áss·¥Ä…¢·¥ás** …™…¥ **{message.chat.title}**. ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä…¥·¥Ö …¢…™·¥†·¥á ·¥ç·¥á ·¥õ ú·¥á  Ä…™…¢ ú·¥õ ·¥ò ü·¥á·¥Äs·¥á.")
            return 
        return await func(app,message,*args,**kwargs)
    return can_delete

def user_admin(mystic):
    @wraps(mystic)
    async def wrapper(app : Client, message : Message,*args,**kwargs):
        chat_type = message.chat.type
        if chat_type == ChatType.PRIVATE:
            return await message.reply("·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥Äs ·¥ç·¥Ä·¥Ö·¥á ·¥ú·¥ò “ì·¥è Ä …¢ Ä·¥è·¥ú·¥òs …¥·¥è·¥õ “ì·¥è Ä ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á")
        if message.sender_chat:
            if message.sender_chat.id == message.chat.id:
                return await message.reply(" è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥. I ·¥Ñ·¥Ä…¥…¥·¥è·¥õ ·¥ò·¥á Ä“ì·¥è Ä·¥ç  è·¥è·¥ú Ä ·¥õ·¥Äs·¥ã. ·¥ò ü·¥á·¥Äs·¥á ·¥ús·¥á ·¥Ä  Ä·¥á·¥Ä ü ID.")
            else:
                return await message.reply_text("s·¥õ·¥Ä è …™…¥  è·¥è·¥ú Ä  ü…™·¥ç…™·¥õs.  ô·¥á·¥Ñ·¥è·¥ç·¥á **·¥Ä·¥Ö·¥ç…™…¥** “ì…™ Äs·¥õ.")
                
        else:
            user_id = message.from_user.id    
            chat_id = message.chat.id
            user = await app.get_chat_member(chat_id,user_id) 
        
            if (user.status not in COMMANDERS) and user_id not in SUPPORT_STAFF:
                return await message.reply_text("s·¥õ·¥Ä è …™…¥  è·¥è·¥ú Ä  ü…™·¥ç…™·¥õs.  ô·¥á·¥Ñ·¥è·¥ç·¥á **·¥Ä·¥Ö·¥ç…™…¥** “ì…™ Äs·¥õ.")
                                                                            
        return await mystic(app,message,*args,**kwargs)

    return wrapper

def user_can_ban(mystic):
    @wraps(mystic)
    async def wrapper(app : Client, message : Message,*args,**kwargs):
        user_id = message.from_user.id
        chat_id = message.chat.id
        user = await app.get_chat_member(chat_id,user_id)
        
        if (user.privileges and not user.privileges.can_restrict_members) and user_id not in SUPPORT_STAFF: 

            return await message.reply_text(" ú·¥á è …¥·¥è·¥è ô  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á  Ä…™…¢ ú·¥õ ·¥õ·¥è ** Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ ·¥ús·¥á Äs**.  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.") 
                                                    
        return await mystic(app,message,*args,**kwargs)
    return wrapper

def user_can_del(mystic):
    @wraps(mystic)
    async def wrapper(app : Client, message : Message,*args,**kwargs):
        user_id = message.from_user.id
        chat_id = message.chat.id
        user = await app.get_chat_member(chat_id,user_id)
        
        if (user.status in COMMANDERS and not user.privileges.can_delete_messages) and user_id not in SUPPORT_STAFF:                     
            return await message.reply_text(" ú·¥á è …¥·¥è·¥è ô  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á  Ä…™…¢ ú·¥õ ·¥õ·¥è **·¥Ö·¥á ü·¥á·¥õ·¥á ·¥ç·¥áss·¥Ä…¢·¥ás**.  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.") 
                                                    
        return await mystic(app,message,*args,**kwargs)
    return wrapper
            

def user_can_change_info(mystic):
    @wraps(mystic)
    async def wrapper(app : Client, message : Message,*args,**kwargs):
        user_id = message.from_user.id
        chat_id = message.chat.id
        user = await app.get_chat_member(chat_id,user_id)
        
        if (user.status in COMMANDERS and not user.privileges.can_change_info) and user_id not in SUPPORT_STAFF:                     
            return await message.reply_text(" ú·¥á è …¥·¥è·¥è ô  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á  Ä…™…¢ ú·¥õ ·¥õ·¥è **·¥Ñ ú·¥Ä…¥…¢·¥á …™…¥“ì·¥è** ·¥è“ì ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö") 
                                                    
        return await mystic(app,message,*args,**kwargs)
    return wrapper
            
def user_can_promote(mystic):
    @wraps(mystic)
    async def wrapper(app : Client, message : Message,*args,**kwargs):
        user_id = message.from_user.id
        chat_id = message.chat.id
        user = await app.get_chat_member(chat_id,user_id)
        
        if (user.status in COMMANDERS and not user.privileges.can_promote_members) and user_id not in SUPPORT_STAFF:                     
            return await message.reply_text(" ú·¥á è …¥·¥è·¥è ô  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á  Ä…™…¢ ú·¥õ ·¥õ·¥è **·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á ·¥ús·¥á Äs** ·¥è“ì ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò.  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö") 
                                                    
        return await mystic(app,message,*args,**kwargs)
    return wrapper
            
